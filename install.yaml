---
- hosts: guest
  vars:
    gcp_project: "{{ lookup('env', 'GCP_PROJECT') }}"
    aws_region: "{{ lookup('env', 'AWS_REGION') }}"
    aws_profile: "default"
    vsphere_server: "{{ lookup('env', 'VSPHERE_SERVER') }}"
    vsphere_username: "{{ lookup('env', 'VSPHERE_USERNAME') }}"
    vsphere_password: "{{ lookup('env', 'VSPHERE_PASSWORD') }}"
    esxi_datacenter: "{{ lookup('env', 'ESXI_DATACENTER') }}"

  tasks:
    - name: copy kernel to guest
      copy:
        src: "{{ kernel_folder }}"
        dest: "/home/admin"

    - block:
        - name: install kernel on guest
          dnf:
            name: "/home/admin/{{ kernel_nvr }}/kernel-{{ kernel_nvr }}.rpm, /home/admin/{{ kernel_nvr }}/kernel-core-{{ kernel_nvr }}.rpm, /home/admin/{{ kernel_nvr }}/kernel-modules-{{ kernel_nvr }}.rpm, /home/admin/{{ kernel_nvr }}/kernel-modules-extra-{{ kernel_nvr }}.rpm"
            state: present
            allow_downgrade: yes
            disable_gpg_check: yes
          become: yes

        - name: reboot guest for new kernel to make effect
          reboot:
            reboot_timeout: 1200
          become: yes

      always:
        - name: gcp check and save the progress of an instance using
          shell: gcloud compute instances get-serial-port-output {{ instance }} --zone=us-central1-a --project={{ gcp_project }} > {{ instance }}.upgrade.serial.log
          delegate_to: localhost
          when: cloud_platform == "gcp"
          ignore_errors: true

        - name: aws check and save the progress of an instance using
          shell: aws --profile {{ aws_profile }} --region {{ aws_region }} ec2 get-console-output --instance-id {{ instance }} --output text > {{ instance }}.upgrade.serial.log
          delegate_to: localhost
          when: cloud_platform == "aws"
          ignore_errors: true

        - name: esxi take guest screenshoot
          vmware_guest_screenshot:
            hostname: "{{ vsphere_server }}"
            username: "{{ vsphere_username }}"
            password: "{{ vsphere_password }}"
            datacenter: "{{ esxi_datacenter }}"
            validate_certs: no
            uuid: "{{ instance }}"
            local_path: "{{ playbook_dir }}"
          delegate_to: localhost
          when: cloud_platform == "esxi"
          ignore_errors: true

    - name: get current kernel version
      shell: uname -r
      register: kernel_version

    - name: show current kernel version
      debug:
        var: kernel_version.stdout

    - name: checking kernel version
      assert:
        that:
          - kernel_version.stdout == kernel_nvr
        fail_msg: "Upgrade kernel to {{ kernel_nvr }} failed"
        success_msg: "Upgrade kernel to {{ kernel_version.stdout }}"
